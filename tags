!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC       = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS   = -g -Wall$/;"	m
CXX	Makefile	/^CXX      = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = $(CFLAGS) -Weffc++$/;"	m
CXX_OBJS	Makefile	/^CXX_OBJS    = $(patsubst %.cpp,%.o,$(wildcard $(CXX_SOURCES)))$/;"	m
CXX_SOURCES	Makefile	/^CXX_SOURCES = $(shell find . -name "*.cpp")$/;"	m
C_OBJS	Makefile	/^C_OBJS      = $(patsubst %.c,%.o,$(wildcard $(C_SOURCES)))$/;"	m
C_SOURCES	Makefile	/^C_SOURCES   = $(shell find . -name "*.c")$/;"	m
DIR	Makefile	/^DIR     = $(shell pwd)$/;"	m
EXEC	Makefile	/^EXEC      = $(shell basename "$(DIR)")$/;"	m
INCPATH	Makefile	/^INCPATH  =$/;"	m
LIBS	Makefile	/^LIBS     = -lm$/;"	m
OBJS	Makefile	/^OBJS        = $(C_OBJS) $(CXX_OBJS)$/;"	m
TreeNode	binary_tree_traversal.cpp	/^    TreeNode<T>(T v);$/;"	p	class:TreeNode	file:	access:public	signature:(T v)
TreeNode	binary_tree_traversal.cpp	/^    TreeNode<T>(void);$/;"	p	class:TreeNode	file:	access:public	signature:(void)
TreeNode	binary_tree_traversal.cpp	/^TreeNode<T>::TreeNode(T v):$/;"	f	class:TreeNode	signature:(T v)
TreeNode	binary_tree_traversal.cpp	/^TreeNode<T>::TreeNode(void):$/;"	f	class:TreeNode	signature:(void)
TreeNode	binary_tree_traversal.cpp	/^class TreeNode$/;"	c	file:
TreeNode::TreeNode	binary_tree_traversal.cpp	/^    TreeNode<T>(T v);$/;"	p	class:TreeNode	file:	access:public	signature:(T v)
TreeNode::TreeNode	binary_tree_traversal.cpp	/^    TreeNode<T>(void);$/;"	p	class:TreeNode	file:	access:public	signature:(void)
TreeNode::TreeNode	binary_tree_traversal.cpp	/^TreeNode<T>::TreeNode(T v):$/;"	f	class:TreeNode	signature:(T v)
TreeNode::TreeNode	binary_tree_traversal.cpp	/^TreeNode<T>::TreeNode(void):$/;"	f	class:TreeNode	signature:(void)
TreeNode::evalTreePost	binary_tree_traversal.cpp	/^    int evalTreePost(TreeNode<T> *node);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *node)
TreeNode::evalTreePost	binary_tree_traversal.cpp	/^int TreeNode<T>::evalTreePost(TreeNode<T> * node)$/;"	f	class:TreeNode	signature:(TreeNode<T> * node)
TreeNode::freeTree	binary_tree_traversal.cpp	/^    void freeTree(TreeNode<T> *root);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *root)
TreeNode::freeTree	binary_tree_traversal.cpp	/^void TreeNode<T>::freeTree(TreeNode<T> *root)$/;"	f	class:TreeNode	signature:(TreeNode<T> *root)
TreeNode::inorder	binary_tree_traversal.cpp	/^    void inorder(TreeNode<T> *root);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *root)
TreeNode::inorder	binary_tree_traversal.cpp	/^void TreeNode<T>::inorder(TreeNode<T> *root)$/;"	f	class:TreeNode	signature:(TreeNode<T> *root)
TreeNode::isOperand	binary_tree_traversal.cpp	/^    bool isOperand(string str);$/;"	p	class:TreeNode	file:	access:public	signature:(string str)
TreeNode::isOperand	binary_tree_traversal.cpp	/^bool TreeNode<T>::isOperand(string str)$/;"	f	class:TreeNode	signature:(string str)
TreeNode::left	binary_tree_traversal.cpp	/^    TreeNode<T> *left;$/;"	m	class:TreeNode	file:	access:public
TreeNode::postorder	binary_tree_traversal.cpp	/^    void postorder(TreeNode<T> *root);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *root)
TreeNode::postorder	binary_tree_traversal.cpp	/^void TreeNode<T>::postorder(TreeNode<T> *root)$/;"	f	class:TreeNode	signature:(TreeNode<T> *root)
TreeNode::postorderToParseTree	binary_tree_traversal.cpp	/^    TreeNode<T>* postorderToParseTree(string str);$/;"	p	class:TreeNode	file:	access:public	signature:(string str)
TreeNode::postorderToParseTree	binary_tree_traversal.cpp	/^TreeNode<T>* TreeNode<T>::postorderToParseTree(string str)$/;"	f	class:TreeNode	signature:(string str)
TreeNode::preorder	binary_tree_traversal.cpp	/^    void preorder(TreeNode<T> *root);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *root)
TreeNode::preorder	binary_tree_traversal.cpp	/^void TreeNode<T>::preorder(TreeNode<T> *root)$/;"	f	class:TreeNode	signature:(TreeNode<T> *root)
TreeNode::right	binary_tree_traversal.cpp	/^    TreeNode<T> *right;$/;"	m	class:TreeNode	file:	access:public
TreeNode::showHumanRep	binary_tree_traversal.cpp	/^    void showHumanRep(TreeNode<T> *node);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *node)
TreeNode::showHumanRep	binary_tree_traversal.cpp	/^void TreeNode<T>::showHumanRep(TreeNode<T> * node)$/;"	f	class:TreeNode	signature:(TreeNode<T> * node)
TreeNode::val	binary_tree_traversal.cpp	/^    T val;$/;"	m	class:TreeNode	file:	access:public
evalTreePost	binary_tree_traversal.cpp	/^    int evalTreePost(TreeNode<T> *node);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *node)
evalTreePost	binary_tree_traversal.cpp	/^int TreeNode<T>::evalTreePost(TreeNode<T> * node)$/;"	f	class:TreeNode	signature:(TreeNode<T> * node)
freeTree	binary_tree_traversal.cpp	/^    void freeTree(TreeNode<T> *root);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *root)
freeTree	binary_tree_traversal.cpp	/^void TreeNode<T>::freeTree(TreeNode<T> *root)$/;"	f	class:TreeNode	signature:(TreeNode<T> *root)
inorder	binary_tree_traversal.cpp	/^    void inorder(TreeNode<T> *root);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *root)
inorder	binary_tree_traversal.cpp	/^void TreeNode<T>::inorder(TreeNode<T> *root)$/;"	f	class:TreeNode	signature:(TreeNode<T> *root)
isOperand	binary_tree_traversal.cpp	/^    bool isOperand(string str);$/;"	p	class:TreeNode	file:	access:public	signature:(string str)
isOperand	binary_tree_traversal.cpp	/^bool TreeNode<T>::isOperand(string str)$/;"	f	class:TreeNode	signature:(string str)
left	binary_tree_traversal.cpp	/^    TreeNode<T> *left;$/;"	m	class:TreeNode	file:	access:public
main	binary_tree_traversal.cpp	/^int main(int argc, const char *argv[])$/;"	f	signature:(int argc, const char *argv[])
postorder	binary_tree_traversal.cpp	/^    void postorder(TreeNode<T> *root);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *root)
postorder	binary_tree_traversal.cpp	/^void TreeNode<T>::postorder(TreeNode<T> *root)$/;"	f	class:TreeNode	signature:(TreeNode<T> *root)
postorderToParseTree	binary_tree_traversal.cpp	/^    TreeNode<T>* postorderToParseTree(string str);$/;"	p	class:TreeNode	file:	access:public	signature:(string str)
postorderToParseTree	binary_tree_traversal.cpp	/^TreeNode<T>* TreeNode<T>::postorderToParseTree(string str)$/;"	f	class:TreeNode	signature:(string str)
preorder	binary_tree_traversal.cpp	/^    void preorder(TreeNode<T> *root);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *root)
preorder	binary_tree_traversal.cpp	/^void TreeNode<T>::preorder(TreeNode<T> *root)$/;"	f	class:TreeNode	signature:(TreeNode<T> *root)
right	binary_tree_traversal.cpp	/^    TreeNode<T> *right;$/;"	m	class:TreeNode	file:	access:public
showHumanRep	binary_tree_traversal.cpp	/^    void showHumanRep(TreeNode<T> *node);$/;"	p	class:TreeNode	file:	access:public	signature:(TreeNode<T> *node)
showHumanRep	binary_tree_traversal.cpp	/^void TreeNode<T>::showHumanRep(TreeNode<T> * node)$/;"	f	class:TreeNode	signature:(TreeNode<T> * node)
val	binary_tree_traversal.cpp	/^    T val;$/;"	m	class:TreeNode	file:	access:public
